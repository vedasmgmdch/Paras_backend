from fastapi import APIRouter, Depends, HTTPException
from pydantic import BaseModel
from sqlalchemy.orm import Session
from database import get_db
from main import get_current_user
from models import Patient
from sqlalchemy import select


router = APIRouter(prefix="/episodes", tags=["episodes"])

class MarkCompleteIn(BaseModel):
    procedure_completed: bool = True

@router.post("/mark-complete")
def mark_complete(payload: MarkCompleteIn, db: Session = Depends(get_db), user=Depends(get_current_user)):
    # Example: mark current user's latest procedure as complete
    result =  db.execute(select(Patient).where(Patient.email == user.email))
    patient = result.scalars().first()
    if not patient:
        raise HTTPException(status_code=404, detail="Patient not found")
    object.__setattr__(patient, 'procedure_completed', payload.procedure_completed)
    db.commit()
    db.refresh(patient)
    return {"procedure_completed": patient.procedure_completed}