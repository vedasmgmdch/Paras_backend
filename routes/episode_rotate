from datetime import date, timedelta
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from database import get_db
from main import get_current_user
from models import Patient
from sqlalchemy import select

router = APIRouter(prefix="/episodes", tags=["episodes"])

@router.post("/rotate-if-due")
async def rotate_if_due(db: Session = Depends(get_db), user=Depends(get_current_user)):
    result = db.execute(select(Patient).where(Patient.email == user.email))
    patient = result.scalars().first()
    if not patient or not getattr(patient, 'procedure_date', None):
        return {"rotated": False, "reason": "No procedure date"}
    if (date.today() - getattr(patient, 'procedure_date')) < timedelta(days=15):
        return {"rotated": False, "reason": "Not due yet"}
    # Your actual rotation logic here (e.g., create new Episode row)
    return {"rotated": True}